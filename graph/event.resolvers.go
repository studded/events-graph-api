package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"

	"github.com/studded/events-graph-api/graph/model"
	"github.com/studded/events-graph-api/middleware"
)

// Activities is the resolver for the activities field.
func (r *eventResolver) Activities(ctx context.Context, obj *model.Event) ([]*model.Activity, error) {
	return r.ActivitiesRepo.GetActivitiesByEventID(obj.ID)
}

// Roles is the resolver for the roles field.
func (r *eventResolver) Roles(ctx context.Context, obj *model.Event) ([]*model.Role, error) {
	return r.RolesRepo.GetRolesByEventID(obj.ID)
}

// Expenses is the resolver for the expenses field.
func (r *eventResolver) Expenses(ctx context.Context, obj *model.Event) ([]*model.Expense, error) {
	currentUser, err := middleware.GetCurrentUserFromCTX(ctx)

	if err != nil {
		return nil, errors.New("must be logged in to view expenses")
	}

	role, err := r.RolesRepo.GetRoleByEventIDAndUserID(obj.ID, currentUser.ID)

	if err != nil || role.Type != "admin" && role.Type != "contributor" {
		return nil, errors.New("only admins and contributors may view expenses")
	}

	return r.ExpensesRepo.GetExpensesByEventID(obj.ID)
}

// ExpenseTotal is the resolver for the expenseTotal field.
func (r *eventResolver) ExpenseTotal(ctx context.Context, obj *model.Event) (float64, error) {
	currentUser, err := middleware.GetCurrentUserFromCTX(ctx)

	if err != nil {
		return 0, errors.New("must be logged in to view expense total")
	}

	role, err := r.RolesRepo.GetRoleByEventIDAndUserID(obj.ID, currentUser.ID)

	if err != nil || role.Type != "admin" && role.Type != "contributor" {
		return 0, errors.New("only admins and contributors may view expense totals")
	}

	return r.ExpensesRepo.GetExpensesTotalByEventID(obj.ID)
}

// ExpenseCategories is the resolver for the expenseCategories field.
func (r *eventResolver) ExpenseCategories(ctx context.Context, obj *model.Event) ([]*model.ExpenseCategory, error) {
	currentUser, err := middleware.GetCurrentUserFromCTX(ctx)

	if err != nil {
		return nil, errors.New("must be logged in to view expense categories")
	}

	role, err := r.RolesRepo.GetRoleByEventIDAndUserID(obj.ID, currentUser.ID)

	if err != nil || role.Type != "admin" && role.Type != "contributor" {
		return nil, errors.New("only admins and contributors may view expense categories")
	}

	return r.ExpensesRepo.GetExpenseCategoriesByEventID(obj.ID)
}

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

type eventResolver struct{ *Resolver }
