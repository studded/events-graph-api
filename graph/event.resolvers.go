package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	"github.com/studded/events-graph-api/graph/model"
)

// Activities is the resolver for the activities field.
func (r *eventResolver) Activities(ctx context.Context, obj *model.Event) ([]*model.Activity, error) {
	return r.ActivitiesRepo.GetActivitiesByEventID(obj.ID)
}

// Roles is the resolver for the roles field.
func (r *eventResolver) Roles(ctx context.Context, obj *model.Event) ([]*model.Role, error) {
	return r.RolesRepo.GetRolesByEventID(obj.ID)
}

// Expenses is the resolver for the expenses field.
func (r *eventResolver) Expenses(ctx context.Context, obj *model.Event) ([]*model.Expense, error) {
	return r.ExpensesRepo.GetExpensesByEventID(obj.ID)
}

// ExpenseTotal is the resolver for the expenseTotal field.
func (r *eventResolver) ExpenseTotal(ctx context.Context, obj *model.Event) (float64, error) {
	return r.ExpensesRepo.GetExpensesTotalByEventID(obj.ID)
}

// ExpenseCategories is the resolver for the expenseCategories field.
func (r *eventResolver) ExpenseCategories(ctx context.Context, obj *model.Event) ([]*model.ExpenseCategory, error) {
	return r.ExpensesRepo.GetExpenseCategoriesByEventID(obj.ID)
}

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

type eventResolver struct{ *Resolver }
