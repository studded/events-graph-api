type Event {
  id: ID!
  name: String!
  startDate: String!
  endDate: String!
  location: String!
  description: String!
  activities: [Activity!]!
	roles: [Role!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  phone: String!
	roles: [Role!]!
}

type Activity {
  id: ID!
	event: Event!
  name: String!
  startTime: String!
  endTime: String!
	description: String!
}

type Role {
  id: ID!
	user: User!
	event: Event!
  type: String!
}

type Query {
	events: [Event!]!
  users: [User!]!
	user(email: String!): User!
}

input NewEvent {
	name: String!
	startDate: String!
	endDate: String!
	location: String!
	description: String!
}

input NewUser {
  name: String!
	email: String!
	phone: String!
}

input NewActivity {
  eventId: ID!
	name: String!
	startTime: String!
	endTime: String!
	description: String!
}

input NewRole {
	userId: ID!
	eventId: ID!
	type: String!
}

type Mutation {
	createUser(input: NewUser!): User!
	createEvent(input: NewEvent!, currentUserId: ID!): Event!
  createActivity(input: NewActivity!, currentUserId: ID!): Activity!
	createRole(input: NewRole!, currentUserId: ID!): Role!
}
